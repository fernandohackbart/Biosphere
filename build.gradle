/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'maven-publish'

group = 'org.biosphere.tissue'
version = '1.0.1'

mainClassName = "org.biosphere.tissue.Cell"
applicationDefaultJvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=trace",
                             "-Dorg.slf4j.simpleLogger.log.org.eclipse=error",
                             "-Dorg.slf4j.simpleLogger.showDateTime=true",
                             "-Dorg.slf4j.simpleLogger.dateTimeFormat=yyyy-MM-dd_HH:mm:ss:SSS"]

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:20.0'
    implementation 'javax.validation:validation-api:1.1.0.Final'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.56'
    implementation 'org.jgrapht:jgrapht-core:1.0.1'
    implementation 'org.jgrapht:jgrapht-ext:1.0.1'
    implementation 'org.eclipse.jetty:jetty-server:9.4.3.v20170317'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.3.v20170317'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.0.pr2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.0.pr2'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'
    //implementation 'org.springframework:spring-web:4.3.7.RELEASE'
   
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

jar {
  from configurations.runtime
  manifest {
    attributes ('Main-Class': 'org.biosphere.tissue.Cell',
                'Class-Path': configurations.runtime.files.collect { jarDir+"/$it.name" }.join(' ')
               )
  }

}


// http://container-solutions.com/how-to-build-docker-images-with-gradle/
/*
apply plugin: 'com.bmuschko.docker-remote-api'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.2'
    }
}


task copyJar(type: Copy) {
    dependsOn   'jar'
    from        "build/libs/elasticsearch-mesos-scheduler-${project.version}.jar"
    into        'build/docker'
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task buildDockerImage(type: DockerBuildImage) {
    dependsOn   copyJar
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)

        }
    }
    else {
        url = 'unix:///var/run/docker.sock'
    }
    inputDir = file('.')
    tag = 'mesos/elasticsearch-scheduler'
}

build.dependsOn buildDockerImage
build.dependsOn copyJar
*/
