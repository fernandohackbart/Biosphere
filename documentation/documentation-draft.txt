h1. Wiki

The tissue sub project is aimed to support the shared services that keep the integrity of the tissue. Some core functionalities are required, below a list with description of each functionality:
*  [[The cell structure]]
*  [[The cell APIs]]
*  [[The DNA structure]]
*  [[Tissue services structures in the DNA]]
*  [[Tissue services mission]]
*  [[Tissue services vital signs]]
*  [[Tissue services healing process]]
*  [[Tissue services adaptation process]]
*  [[Tissue services autonomic behavior]]
*  [[Tissue Learning Capabilities]]

Some general rules:

#  The tissue itself benefits from the those definitions, the capabilities of the tissue are found also in each cell, and the relationship between the cell and the tissue should be described in a way that any cell could affect the tissue to heal a service and the tissue could affect a cell to heal one service.
#  Cell should be able to die without affecting the tissue or service. 
#  The tissue DNA should keep the totality of the knowledge about the tissue cells, services and behaviors.

The start of the Biosphere was on autonomic computing studies, the blog [[Autonomic Behavior Blog]] have some blog entries that are the beginning of the work.


#####################################################################################################################

h1. The cell structure

The cell is the basic structure of the tissue, it contains all functionalities that are required for a tissue to exist. The statement "one cell is a tissue" proposes the adoption of the philosophy that one cell should contain all the tissue functionalities but the tissue wit many cells is a much stronger tissue.


!BiosphereCellStructure.png!


#####################################################################################################################

h1. The cell APIs

The cell APIs are the interfaces to control the cell and services, it exposes all the functionalities required to maintain the cell and its services.

!BiosphereCellStructure-API.png!

#####################################################################################################################
h1. The DNA structure

The DNA is the representation of the many components in the tissue.

!BiosphereCellStructure-DNA.png!
#####################################################################################################################
h1. Tissue services structures in the DNA

The service should be able to be entirely described in the DNA, the service description is divided in two main parts:
*  [[Service definition]]
*  [[Service instance]]

Some rules:

#  The services should exchangeable among cells, the entire content (including implementation code) should be able to be transferred. 
#  The services should the able to be loaded, started, stopped and unloaded within the cell life-cycle
#  The cell should be able to support many instances of the same service definition.



#####################################################################################################################
h1. Service definition

The service definition is the representation of the attributes of the service to be used while instantiating or running the service.

Some possible attributes of one cell definition:
#  Name
#  Implementing class
#  Parameter with default values
#  [[Tissue services vital signs]]
#  [[Tissue services healing process]]
#  [[Tissue services adaptation process]]

Some rules:
#  The service should support one method getDNA() that returns the service definition (attrbutes)
#  The DNA should support one method getServiceDefinition(String serviceDefinitioName)

#####################################################################################################################
h1. Service instance

The service instance describes one instance of one service within one cell.
The service instance contains the current parameters and vital signs available for that service, also holds the vital signs history for the service.


Some rules:
#  The DNA should support one method getServiceInstance(String serviceInstanceName) that will return all the attributes of the specified service instance.
#  The DNA should support one method getServiceInstanceVitalSigns(String serviceInstanceName) that will return the vital signs for the specified service  instance.
#####################################################################################################################
h1. Tissue services vital signs

The service vital signs is a collection of metrics that represent the health state of one service, each service implements its on set of vital signs, some generic vital signs are implemented by the abstract class Service.

each vital sign should support a minimum set of attributes:
*  *VitalSignName* (String), the name of the vital sign
*  *VitalSignMeasure* (decimal), the numeric value of the vital sign
*  *VitalSignMeaning* (String), the description of the vital sign
*  *VitalSignSurviveUpperLimit* (decimal), the maximum value for the vital sign the service is considered alive
*  *VitalSignSurviveLowerLimit* (decimal), the minimum value for the vital sign the service is considered alive
*  *VitalSignAcceptanceUpperLimit* (decimal), the maximum value for the vital sign the service is considered in acceptable state
*  *VitalSignAcceptanceLowerLimit* (decimal), the minimum value for the vital sign the service is considered in acceptable state
*  *VitalSignTargetUpperLimit* (decimal), the minimum value for the vital sign the service is considered in target state
*  *VitalSignTargetLowerLimit* (decimal), the minimum value for the vital sign the service is considered in target state

Some rules:
#  The service instance will keep history of the timeline vital signs 
#  The service instance will keep the startup time
#  The service should be able to learn from failures and create new vital signs, this is achieved through [[Tissue Learning Capabilities]]

Some examples of vital signs:
#  Dependency failures
#  Dependency timeouts
#  Request queue size
#  Response time
#####################################################################################################################
h1. Tissue services healing process

The service healing process describes the process to heal a service, it may describe cell operations or tissue operations.

Some examples:
#  increase service capacity in the tissue
#  request support from tissues

!OrganicVitalSignsSpaces-Healing.png!

The operations can be divided in global (*tissue*) and local (*cell*), and follow the autonomic computing elements:
*  *Monitor*
*  *Analyzer*
*  *Planner*
*  *Executor*

externally the interfaces are
* *Sensor*
* *Effector*

!autonomic-computing.png!
#####################################################################################################################
h1. Tissue services adaptation process

The service adaptation process is normally requests externally by a new definition of the target space, this happens for the tissue to adapt to new conditions and be able to survive to the new conditions. 

!OrganicVitalSignsSpaces-Adaptation.png!

The operations can be divided in global (*tissue*) and local (*cell*), and follow the autonomic computing elements:
*  *Monitor*
*  *Analyzer*
*  *Planner*
*  *Executor*

externally the interfaces are
* *Sensor*
* *Effector*

!autonomic-computing.png!

#####################################################################################################################
h1. Tissue services autonomic behavior

Tissues service development, the concept of service should include the autonomic computing principles as organic computing concepts.

There are four concepts to be used:
*  [[Tissue services vital signs]]
*  [[Tissue services adaptation process]]
*  [[Tissue services healing process]]
*  [[Tissue services mission]]

From the autonomic computing, the basic functions

Monitor and analyze: (working over the vital signs)
Plan and execute: (working over the vital signs and profilaxy)

The service exposes also sensor and effector to interact with the tissue for react to external changes and adapt to it.


The capabilities expected from autonomic services running over the tissue:

# *Self-configuration*: Automatic configuration of components;
# *Self-healing*: Automatic discovery, and correction of faults;[8]
# *Self-optimization*: Automatic monitoring and control of resources to ensure the optimal functioning with respect to the defined requirements;
# *Self-protection*: Proactive identification and protection from arbitrary attacks.

Others such as Poslad [7] and Nami and Bertel [9] have expanded on the set of self-star as follows:

# *Self-regulation*: A system that operates to maintain some parameter, e.g., Quality of service, within a reset range without external control;
# *Self-learning*: Systems use machine learning techniques such as unsupervised learning which does not require external control;
# *Self-awareness* (also called Self-inspection and Self-decision): System must know itself. It must know the extent of its own resources and the resources it links to. A system must be aware of its internal components and external links in order to control and manage them;
# *Self-organization*: System structure driven by physics-type models without explicit pressure or involvement from outside the system;
# *Self-creation* (also called *Self-assembly*, *Self-replication*): System driven by ecological and social type models without explicit pressure or involvement from outside the system. A systemâ€™s members are self-motivated and self-driven, generating complexity and order in a creative response to a continuously changing strategic demand;
# *Self-management* (also called *self-governance*): A system that manages itself without external intervention. What is being managed can vary dependent on the system and application. Self -management also refers to a set of self-star processes such as autonomic computing rather than a single self-star process;
# *Self-description* (also called *self-explanation* or *Self-representation*): A system explains itself. It is capable of being understood (by humans) without further explanation.
    See also: Reflection (computer programming)
#####################################################################################################################
h1. Tissue Learning Capabilities

The tissue should be able to learn from failures and critical situations, some functionalities are required to achieve this hability:
*  learn from new failures
*  create [[Tissue services vital signs]] and [[Tissue services healing process]]
#####################################################################################################################
!BiosphereServiceDiscovery.png!
#####################################################################################################################



 
